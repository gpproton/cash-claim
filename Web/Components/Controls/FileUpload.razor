@inject ISnackbar Snackbar

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    IList<IBrowserFile> _value = new List<IBrowserFile>();
    
    [Parameter]
    public IList<IBrowserFile> Value { get => _value; set {
        if(value.Equals(_value)) return;
        _value = value;  
        if(ValueChanged.HasDelegate)  ValueChanged.InvokeAsync(_value);
    }}
    
    [Parameter]
    public EventCallback<IList<IBrowserFile>> ValueChanged { get; set; }

    private void OnInputFileChanged(InputFileChangeEventArgs e) {
        ClearDragClass();
        foreach (var file in e.GetMultipleFiles())
            _value.Add(file);
    }

    private async Task Clear() {
        _value.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    
    private void Upload() {
        Snackbar.Clear();
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass() =>
        _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass() => _dragClass = DefaultDragClass;
}

<MudStack Spacing="5" Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                   @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="115px" Outlined="true" Class="@_dragClass">
                <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                    <MudIcon Class="mb-1" Icon="@Icons.Material.Filled.FileUpload" Size="Size.Large" />
                    <MudText Typo="Typo.body1">@(_value.Count > 0 ? $"{_value.Count} files added": "Click to upload or drag and drop")</MudText>
                    <MudText Typo="Typo.body2">Maximum file size 50 MB</MudText>
                </MudStack>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    @if (_value.Count > 0) {
        <MudExpansionPanels>
            <MudExpansionPanel Text="Uploaded Files" Icon="@Icons.Material.Filled.ArrowDropDown">
                <MudList Dense="true" Style="max-height: 185px; overflow-y: scroll">
                    @foreach (var file in _value) {
                        <MudListItem Dense="true">
                            <MudStack Spacing="4" Row="true" Justify="Justify.FlexStart">
                                <MudAvatar Rounded="true" Size="Size.Large" Color="Color.Default" Variant="Variant.Outlined">
                                    <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Size="Size.Large" Color="Color.Default" />
                                </MudAvatar>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width: 100%">
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.body2">@file.Name</MudText>
                                        <MudText Typo="Typo.caption">@(Math.Round(file.Size / (decimal)(1000 * 1000), 2)) MB</MudText>
                                    </MudStack>
                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="() => _value.RemoveAt(_value.IndexOf(file))" />
                                </MudStack>
                            </MudStack>
                        </MudListItem>
                        @if(_value.IndexOf(file) != _value.Count - 1) { <MudDivider/> }
                    }
                </MudList>
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
</MudStack>