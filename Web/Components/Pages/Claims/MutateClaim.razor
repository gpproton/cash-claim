@using CashClaim.Common.Dtos
@using CashClaim.Common.Enums
@using CashClaim.Common.Helpers
@using Nextended.Core.Extensions
@inject IClaimService Http
@inject ICategoryService CategoryService
@inject ICurrencyService CurrencyService
@inject AuthState AuthState
@inject ISnackbar Snackbar

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    bool _success;
    string[] _errors = { };
    MudForm? _form;
    
    [Parameter]
    public Guid? Id { get; set; }
    
    private CategoryResponse? Category { get; set; }
    
    private CurrencyResponse? Currency { get; set; }
    
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    
    private async Task<IEnumerable<CategoryResponse>> SearchCategory(string value) {
        var response = await CategoryService.GetAllAsync(new SearchFilter { Search = value });
        return (response.Succeeded ? response.Data : new List<CategoryResponse>())!;
    }
    
    private async Task<IEnumerable<CurrencyResponse>> SearchCurrency(string value) {
        var response = await CurrencyService.GetAllAsync(new SearchFilter { Search = value });
        return (response.Succeeded ? response.Data : new List<CurrencyResponse>())!;
    }
    
    private string ActionText => Id == null ? "Create" : "Update";

    private bool Loading { get; set; }

    private string Title => $"{ActionText} Claim";

    private ClaimResponse Item { get; set; } = new ClaimResponse();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        if (Id != null) {
            Loading = true;
            var response = (await Http.GetByIdAsync(Id.Value)).Data;
            if (response != null) {
                Category = response.Category;
                Currency = response.Currency;
                response.Company = null;
                response.Currency = null;
                Item = response;
            }
            Loading = false;
        } else {
            var user = await AuthState.GetAccount();
            Currency = user!.Currency;
        }
    }

    async Task Submit() {
        await _form!.Validate();
        if (!_success) return;
        
        Item.CategoryId = Category?.Id;
        Item.CurrencyId = Currency?.Id;
        var result = Id == null ? (await Http.CreateAsync(Item)) : (await Http.UpdateAsync(Item));
        MudDialog.Close(DialogResult.Ok(result.Succeeded));
    }

    async Task TriggerArchive(bool state) {
        if (Item.Id != null && state) {
            var result = (await Http.ArchiveAsync(Item.Id.Value)).Succeeded;
            Snackbar.Add(result ? "Deleted successfully" : "Archiving failed", result ? Severity.Success : Severity.Error);
            MudDialog.Close(DialogResult.Ok(result));
        }
    }

    private static string AmountTooLow(string s) => Decimal.Parse(s) < 100 ? "Amount must be more than 100" : string.Empty;
}

<MudDialog>
    <TitleContent>
        <MudStack Row="true" Justify="@( Id == null ? Justify.Center : Justify.SpaceBetween)">
            <MudText Align="Align.Center" Typo="Typo.h5">@Title</MudText>
            @if (Id != null) {
                <ConfirmationDialog ButtonText="true" OnTriggered="TriggerArchive" />
            }
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudOverlay Visible="Loading" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Default" Style="height:96px;width:96px;" Indeterminate="true" />
        </MudOverlay>
        <MudContainer Class="my-4" MaxWidth="MaxWidth.Small">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudGrid>
                    <MudItem xs="8">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="Item.Description" T="string" Label="Description"
                                      Required="true" RequiredError="Description is required!" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="Item.Amount" InputType="InputType.Number"
                                      T="decimal" Label="Amount" Required="true" Validation="@(new Func<string, string>(AmountTooLow))"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <CategoryAutoComplete Required="true" @bind-Value="Category" />
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12">
                        <FileUpload @bind-Value="_files" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="More Options" Icon="@Icons.Material.Filled.ArrowDropDown">
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudSelect T="ClaimPriority" Label="Priority" Variant="Variant.Outlined" @bind-Value="Item.Priority"
                                                   For="@(() => Item.Priority)" AnchorOrigin="Origin.BottomCenter">
                                            @foreach (var priority in Enum.GetValues<ClaimPriority>()) {
                                                <MudSelectItem Value="priority">@priority.ToDescriptionString().Capitalize()</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <CurrencyAutoComplete Required="true" @bind-Value="Currency" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField Variant="Variant.Outlined" Lines="4" @bind-Value="Item.Notes" T="string" Label="Notes"/>
                                    </MudItem>
                                </MudGrid>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-8">
            <MudButton Variant="Variant.Text" DisableElevation="true" Color="Color.Primary"
                       OnClick="() => MudDialog.Cancel()"
                       Size="Size.Large" Class="px-12 py-3">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit"
                       Size="Size.Large" Class="px-12 py-3">@ActionText</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>