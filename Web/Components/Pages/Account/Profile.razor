@page "/app/account/profile"
@using CashClaim.Common.Dtos
@using CashClaim.Common.Helpers
@using System.ComponentModel.DataAnnotations
@inject IUserService Http
@inject ICurrencyService CurrencyService
@inject Navigation Nav
@inject AuthState AuthState
@inject ISnackbar Snackbar
@attribute [Authorize]

@code {
    private bool Loading { get; set; }
    bool _success;
    string[] _errors = { };
    MudForm? _form;
    
    private CurrencyResponse? Currency { get; set; }
    
    private async Task<IEnumerable<CurrencyResponse>> SearchCurrency(string value) {
        var response = await CurrencyService.GetAllAsync(new SearchFilter { Search = value });
        return (response.Succeeded ? response.Data : new List<CurrencyResponse> {})!;
    }
    
    private UserResponse Item { get; set; } = new UserResponse();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        var user = await AuthState.GetAccount();
        if (user!.Id != null) {
            var id = (Guid) user!.Id!;
            Loading = true;
            var res = await Http.GetByIdAsync(id);
            if (res.Succeeded) {
                var result = res.Data!;
                Currency = result.Currency;
                Item = result;
            }
            Loading = false;
        }
    }
    
    async Task Submit() {
        await _form!.Validate();
        if (!_success) return;
        Item.CurrencyId = Currency?.Id;
        var result = await  Http.UpdateAsync(Item);
        if (result.Succeeded)
            await AuthState.Refresh();
        Snackbar.Clear();
        await Task.Delay(1500);
        Snackbar.Add(result.Succeeded ? "Updated successfully.." : "Update failed..", result.Succeeded ? Severity.Success : Severity.Error);
    }
    
    private string ProfileInitials => StringHelpers.GetInitialsText(new[] {
        Item.FirstName, Item.LastName
    });

}

<Title>Account profile</Title>

<MudContainer Class="mt-12" MaxWidth="MaxWidth.Medium">
    <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
        <MudGrid Justify="Justify.Center" Class="mt-6">
            <MudItem xs="12" md="6">
                <MudGrid>
                    <MudItem xs="12" Class="py-4">
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudBadge Color="Color.Warning" Origin="Origin.TopCenter" Icon="@Icons.Material.Filled.Add" Overlap="true" Bordered="true">
                                <MudAvatar Rounded="true" Style="height:75px; width:75px; font-size:2.2rem;">@ProfileInitials</MudAvatar>
                            </MudBadge>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="Item.FirstName" T="string" Label="First Name"
                                      Required="true" RequiredError="Firstname is required!" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Variant="Variant.Outlined" @bind-Value="Item.LastName" T="string" Label="Last Name"
                                      Required="true" RequiredError="Lastname is required!" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Variant="Variant.Outlined" InputType="InputType.Email" @bind-Value="Item.Email" T="string" Label="Email"
                                      Required="true" RequiredError="Email is required!"
                                      Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Variant="Variant.Outlined" InputType="InputType.Telephone" @bind-Value="Item.Phone" T="string" Label="Phone"
                                      Required="true" RequiredError="Phone number is required!" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudAutocomplete T="CurrencyResponse" Label="Currency" @bind-Value="Currency" SearchFunc="@SearchCurrency"
                                         Variant="Variant.Outlined" ShowProgressIndicator="true" OnClearButtonClick="() => Currency = null"
                                         Clearable="true" ToStringFunc="@(e => e == null ? null : $"{e.Symbol} - {e.Name}")"
                                         Required="true" RequiredError="Currency selection is required!" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudButton Variant="Variant.Text" DisableElevation="true" Color="Color.Primary" OnClick="() => Nav.NavigateBack()"
                                       Size="Size.Large" Class="mt-8 px-12 py-3">Back</MudButton>
                            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" OnClick="Submit" Size="Size.Large" Class="mt-8 px-12 py-3">Update</MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>