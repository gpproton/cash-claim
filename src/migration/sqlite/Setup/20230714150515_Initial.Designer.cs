// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XClaim.Common.Context;

#nullable disable

namespace XClaim.Migrate.Sqlite.Setup
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20230714150515_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("XClaim.Common.Entity.AccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lockout_enabled");

                    b.Property<long?>("LockoutEnd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("two_factor_enabled");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_accounts_deleted_at");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.AuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Changed")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("changed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("row_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.BankAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("BankId")
                        .HasColumnType("TEXT")
                        .HasColumnName("bank_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_bank_account");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_user_bank_account_bank_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_bank_account_deleted_at");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_bank_account_user_id");

                    b.ToTable("user_bank_account", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.BankEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("swift_code");

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_name");

                    b.ToTable("banks", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_categories_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_categories_deleted_at");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<Guid?>("ConfirmedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_by_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("rejected_at");

                    b.Property<Guid?>("RejectedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("rejected_by_id");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_by_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("ix_claims_approved_by_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_claims_category_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_claims_company_id");

                    b.HasIndex("ConfirmedById")
                        .HasDatabaseName("ix_claims_confirmed_by_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_claims_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_claims_deleted_at");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_claims_payment_id");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("ix_claims_reviewed_by_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_claims_user_id");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<string>("Content")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_comments_claim_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_comments_payment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_manager_id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT")
                        .HasColumnName("rate");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_name");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_events_claim_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_events_payment_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<string>("Extension")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_files_claim_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_files_payment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_files_user_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Channels")
                        .HasColumnType("TEXT")
                        .HasColumnName("channels");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disabled");

                    b.Property<string>("Types")
                        .HasColumnType("TEXT")
                        .HasColumnName("types");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_notifications");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_notifications_deleted_at");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_notifications_user_id");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_payments_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_payments_deleted_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_payments_user_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.ProfileTransferEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("completed");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transfer_requests");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_transfer_requests_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_transfer_requests_deleted_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transfer_requests_user_id");

                    b.ToTable("transfer_requests", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.ServerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<bool>("MaintenanceActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maintenance_active");

                    b.Property<string>("MaintenanceText")
                        .HasColumnType("TEXT")
                        .HasColumnName("maintenance_text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("TEXT")
                        .HasColumnName("service_name");

                    b.HasKey("Id")
                        .HasName("pk_server");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_server_currency_id");

                    b.ToTable("server", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.SettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_mode");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER")
                        .HasColumnName("language");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_setting");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_setting_deleted_at");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_setting_user_id");

                    b.ToTable("user_setting", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_teams_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_teams_deleted_at");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_manager_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasColumnName("balance");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("CompanyManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_managed_id");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<int>("Permission")
                        .HasColumnType("INTEGER")
                        .HasColumnName("permission");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT")
                        .HasColumnName("profile_image");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TeamManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_managed_id");

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.Property<long?>("UpdatedAt")
                        .HasColumnType("INTEGER")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_users_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_users_deleted_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identifier");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_users_team_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("XClaim.Common.Entity.BankAccountEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .HasConstraintName("fk_user_bank_account_banks_bank_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithOne("BankAccount")
                        .HasForeignKey("XClaim.Common.Entity.BankAccountEntity", "UserId")
                        .HasConstraintName("fk_user_bank_account_users_user_id");

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.CategoryEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_categories_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("XClaim.Common.Entity.ClaimEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.UserEntity", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("fk_claims_users_approved_by_id");

                    b.HasOne("XClaim.Common.Entity.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_claims_categories_category_id");

                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_claims_companies_company_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedById")
                        .HasConstraintName("fk_claims_users_confirmed_by_id");

                    b.HasOne("XClaim.Common.Entity.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_claims_currencies_currency_id");

                    b.HasOne("XClaim.Common.Entity.PaymentEntity", "Payment")
                        .WithMany("Claims")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_claims_payments_payment_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("fk_claims_users_reviewed_by_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_claims_users_user_id");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ConfirmedBy");

                    b.Navigation("Currency");

                    b.Navigation("Payment");

                    b.Navigation("ReviewedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.CommentEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.ClaimEntity", "Claim")
                        .WithMany("Comments")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_comments_claims_claim_id");

                    b.HasOne("XClaim.Common.Entity.PaymentEntity", "Payment")
                        .WithMany("Comments")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_comments_payments_payment_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Claim");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.CompanyEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.UserEntity", "Manager")
                        .WithOne("CompanyManaged")
                        .HasForeignKey("XClaim.Common.Entity.CompanyEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_companies_users_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("XClaim.Common.Entity.EventEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.ClaimEntity", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_events_claims_claim_id");

                    b.HasOne("XClaim.Common.Entity.PaymentEntity", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_events_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("XClaim.Common.Entity.FileEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.ClaimEntity", "Claim")
                        .WithMany("Files")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_files_claims_claim_id");

                    b.HasOne("XClaim.Common.Entity.PaymentEntity", "Payment")
                        .WithMany("Files")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_files_payments_payment_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_files_users_user_id");

                    b.Navigation("Claim");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.NotificationEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithOne("Notification")
                        .HasForeignKey("XClaim.Common.Entity.NotificationEntity", "UserId")
                        .HasConstraintName("fk_user_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.PaymentEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_payments_companies_company_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_payments_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.ProfileTransferEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_transfer_requests_companies_company_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_transfer_requests_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.ServerEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_server_currencies_currency_id");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("XClaim.Common.Entity.SettingsEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.UserEntity", "User")
                        .WithOne("Setting")
                        .HasForeignKey("XClaim.Common.Entity.SettingsEntity", "UserId")
                        .HasConstraintName("fk_user_setting_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XClaim.Common.Entity.TeamEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_teams_companies_company_id");

                    b.HasOne("XClaim.Common.Entity.UserEntity", "Manager")
                        .WithOne("TeamManaged")
                        .HasForeignKey("XClaim.Common.Entity.TeamEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_teams_users_manager_id");

                    b.Navigation("Company");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("XClaim.Common.Entity.UserEntity", b =>
                {
                    b.HasOne("XClaim.Common.Entity.CompanyEntity", "Company")
                        .WithMany("Members")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("XClaim.Common.Entity.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_users_currencies_currency_id");

                    b.HasOne("XClaim.Common.Entity.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_users_teams_team_id");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("XClaim.Common.Entity.ClaimEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("XClaim.Common.Entity.CompanyEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("XClaim.Common.Entity.PaymentEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("XClaim.Common.Entity.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("XClaim.Common.Entity.UserEntity", b =>
                {
                    b.Navigation("BankAccount");

                    b.Navigation("CompanyManaged");

                    b.Navigation("Notification");

                    b.Navigation("Setting");

                    b.Navigation("TeamManaged");
                });
#pragma warning restore 612, 618
        }
    }
}
