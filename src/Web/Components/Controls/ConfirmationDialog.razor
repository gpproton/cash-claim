@inject IDialogService DialogService

@code {
    [Parameter]
    public int Count { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnTriggered { get; set; }

    [Parameter]
    public bool Small { get; set; }
    
    [Parameter]
    public Variant? ButtonVariant { get; set; }

    [Parameter]
    public bool ButtonText { get; set; }
    
    [Parameter]
    public Color? ButtonColor { get; set; }
    
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Text { get; set; } = "Archive";

    [Parameter]
    public string Icon { get; set; } = Icons.Material.Filled.Archive;
    
    private string ArchiveTitle {
        get {
            const string text = "Confirm Archiving";
            return Count < 2 ? text : $"{text} {Count} items";
        }
    }

    async Task TriggerRequest() {
        var result = await (await DialogService.ShowAsync<ArchiveDialog>(Title ?? ArchiveTitle)).Result;
        if (!result.Canceled) {
            var value = result.Data.As<bool>();
            await OnTriggered.InvokeAsync(value);
        }
    }
}

@if (Count > 0 && !ButtonText) {
    <MudIconButton Class="pa-2 mr-2" Icon="@Icon" Variant="@(ButtonVariant ?? Variant.Outlined)"
                   OnClick="TriggerRequest" Color="@(ButtonColor ?? Color.Info)" Size="@(Small ? Size.Small : Size.Large)"/>
} else if (ButtonText) {
    <MudButton Variant="@(ButtonVariant ?? Variant.Text)" Color="@(ButtonColor ?? Color.Primary)" StartIcon="@Icon"
               Size="@(Small ? Size.Small : Size.Large)" OnClick="TriggerRequest">@Text</MudButton>
}