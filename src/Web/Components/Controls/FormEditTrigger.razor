@inject IDialogService DialogService
@inject ISnackbar Snackbar
@typeparam TForm where TForm : ComponentBase

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public bool Small { get; set; } = true;

    [Parameter]
    public string Icon { get; set; } = Icons.Material.Filled.Edit;

    [Parameter]
    public Color ButtonColor { get; set; } = Color.Warning;
    
    [Parameter]
    public EventCallback<bool> OnTriggered { get; set; }
    
    private async Task TriggerEdit() {
        var parameters = new DialogParameters { { "Id", Id } };
        var dialog = await DialogService.ShowAsync<TForm>(string.Empty, parameters);
        var result = await dialog.Result;
        if (!result.Canceled) {
            var value = result.Data.As<bool>();
            
            await OnTriggered.InvokeAsync(value)!;
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            if (value) Snackbar.Add("Saved successfully", Severity.Success);
            else Snackbar.Add("Failed..", Severity.Error);
        }
    }
}

<MudIconButton Class="pa-2" Icon="@Icon" Size="@(Small ? Size.Small : Size.Medium)" Variant="Variant.Filled" OnClick="TriggerEdit" Color="@ButtonColor" />