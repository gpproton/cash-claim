@inject IDialogService DialogService

@code {
    [Parameter]
    public int Count { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnDeleted { get; set; }

    [Parameter]
    public bool Small { get; set; }

    [Parameter]
    public bool Form { get; set; }
    
    [Parameter]
    public string Title { get; set; } = "Confirm Archiving";

    async Task DeleteRequest() {
        var text = Count == 1 ? Title : $"{Title} {Count} items";
        var result = await (await DialogService.ShowAsync<ArchiveDialog>(text)).Result;
        if (!result.Canceled) {
            var value = result.Data.As<bool>();
            await OnDeleted.InvokeAsync(value);
        }
    }
}

@if (Count > 0 && !Form) {
    <MudIconButton Class="pa-2 mr-2" Icon="@Icons.Material.Filled.Archive" Variant="Variant.Outlined"
                   OnClick="DeleteRequest" Color="Color.Info" Size="@(Small ? Size.Small : Size.Large)"/>
} else if (Form) {
    <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Archive" OnClick="DeleteRequest">Archive</MudButton>
}