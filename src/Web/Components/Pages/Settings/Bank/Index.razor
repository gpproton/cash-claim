@using XClaim.Common.Dtos
@inject IBankService Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@page "/app/settings/banks"
@attribute [Authorize]

@code {
    private string Search { get; set; } = string.Empty;
    private bool Loading { get; set; }
    private DateRange _dateRange = WebConst.AppDateRange;
    private IEnumerable<BankResponse> _elements = new List<BankResponse>();
    private HashSet<BankResponse> SelectedItems { get; set; } = new HashSet<BankResponse>();
    private int CurrentPage { get; set; } = 1;
    
    protected override async Task OnInitializedAsync() => await LoadItems();

    private async Task LoadItems() {
        this.Loading = true;
        _elements = await Http.GetAllAsync();
        this.Loading = false;
    }

    private void ArchiveSelectedItems(bool result) => Console.WriteLine(result);
    
    private Func<BankResponse, bool> Filter => x => string.IsNullOrWhiteSpace(Search) || x.Name.Contains(Search, StringComparison.OrdinalIgnoreCase);

    private async Task ReloadList(bool reload) {
        if (reload) await this.LoadItems();
    }

    private async Task TriggerEdit(Guid id) {
        var parameters = new DialogParameters { { "Id", id } };
        var dialog = await DialogService.ShowAsync<MutateBank>(string.Empty, parameters);
        var result = await dialog.Result;
        if (!result.Canceled) {
            var value = result.Data.As<bool>();
            // Check event creation...
            if (value) await this.LoadItems();
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            if (value) Snackbar.Add("Saved successfully", Severity.Success);
            else Snackbar.Add("Failed..", Severity.Error);
        }
    }
}

<Title>Banks</Title>

<MudDataGrid T="BankResponse" Items="@_elements" MultiSelection="true" SelectedItems="SelectedItems"
             Loading="Loading" Height="@WebConst.TableHeight" Hover="true" FixedHeader="true"
             SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@Filter" Hideable="true" CurrentPage="CurrentPage">
    <ToolBarContent>
        <TableToolbar TFilter="DateDialog" TValue="DateRange" TCreate="MutateBank" OnCreateClicked="ReloadList" IsFilterActive="false" @bind-Value="_dateRange" @bind-Search="Search">
            <ArchiveConfirmation Count="@SelectedItems.Count" OnDeleted="ArchiveSelectedItems"></ArchiveConfirmation>
        </TableToolbar>
    </ToolBarContent>
    <LoadingContent>
         <TableLoading></TableLoading>
    </LoadingContent>
    <Columns>
        <SelectColumn T="BankResponse" ShowInFooter="false" ShowInHeader="false" />
        <Column T="BankResponse" Field="Name" />
        <Column T="BankResponse" Field="Active" />
        <Column T="BankResponse" Field="Description" />
        <Column T="BankResponse">
            <CellTemplate>
                <MudIconButton Class="pa-2" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled"
                               OnClick="async () => {if (context.Item?.Id != null) await TriggerEdit(context.Item.Id.Value);}" Color="Color.Warning" />
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
         <MudDataGridPager T="BankResponse" PageSizeOptions="WebConst.AppPaged" />
    </PagerContent>
</MudDataGrid>