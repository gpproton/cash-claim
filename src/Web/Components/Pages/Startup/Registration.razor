@page "/app/registration"
@using XClaim.Common.Dtos
@using XClaim.Common.Helpers
@using Nextended.Core.Extensions
@inject IUserService Http
@inject ICompanyService CompanyService
@inject ICurrencyService CurrencyService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject AuthState AuthState
@attribute [Authorize]

@code {
    private CompanyResponse? Company { get; set; }
    
    private CurrencyResponse? Currency { get; set; }
    
    private async Task<IEnumerable<CompanyResponse>> SearchCompany(string value) {
        var response = await CompanyService.GetAllAsync(new SearchFilter { Search = value });
        return (response.Succeeded ? response.Data : new List<CompanyResponse> {})!;
    }
    
    private async Task<IEnumerable<CurrencyResponse>> SearchCurrency(string value) {
        var response = await CurrencyService.GetAllAsync(new SearchFilter { Search = value });
        return (response.Succeeded ? response.Data : new List<CurrencyResponse> {})!;
    }
    
    private UserResponse Item { get; set; } = new UserResponse();

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        var session = await AuthState.GetSession();
        
        if (session?.Data != null) {
            UserResponse data = session.Data;
            // Check domain validation
            if (data.Email.IsNullOrEmpty()) await AuthState.TriggerSignOut();
            
            Item.FirstName = data.FirstName;
            Item.LastName = data.LastName;
            Item.Email = data.Email;
            Item.Phone = data.Phone;
        }
    }

    async Task Verify() {
        Item.CompanyId = Company?.Id;
        Item.CurrencyId = Currency?.Id;
        var result = await  Http.RegistrationAsync(Item);
        if (result.Succeeded) {
            await AuthState.TriggerAuthentication();
            Snackbar.Add("Verification successful..", Severity.Success);
            await Task.Delay(500);
            Nav.NavigateTo(WebConst.AppHome, true);
        } else {
            Snackbar.Add("Verification failed..", Severity.Error);
        }
    }
}

<Title>Registration</Title>

<MudContainer Class="mt-12" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Verify Account</MudText>
    <MudGrid Justify="Justify.Center" Class="mt-4">
        <MudItem xs="12" md="6">
            <MudGrid>
                <MudItem xs="12" Class="py-4">
                    <MudStack Row="true" Justify="Justify.Center">
                        <MudBadge Color="Color.Warning" Origin="Origin.TopCenter" Icon="@Icons.Material.Filled.Add" Overlap="true" Bordered="true">
                            <MudAvatar Rounded="true" Style="height:75px; width:75px; font-size:2.2rem;">SA</MudAvatar>
                        </MudBadge>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudItem xs="12">
                        <MudAutocomplete T="CompanyResponse" Label="Company" @bind-Value="Company" SearchFunc="@SearchCompany"
                                         Variant="Variant.Outlined" ShowProgressIndicator="true" OnClearButtonClick="() => Company = null"
                                         Clearable="true" ToStringFunc="@(e => e == null ? null : $"{e.FullName}")"/>
                    </MudItem>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="Item.FirstName" T="string" Label="First Name"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="Item.LastName" T="string" Label="Last Name"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" InputType="InputType.Email" @bind-Value="Item.Email" T="string" Label="Email"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" InputType="InputType.Telephone" @bind-Value="Item.Phone" T="string" Label="Phone"/>
                </MudItem>
                <MudItem xs="12">
                    <MudAutocomplete T="CurrencyResponse" Label="Currency" @bind-Value="Currency" SearchFunc="@SearchCurrency"
                                     Variant="Variant.Outlined" ShowProgressIndicator="true" OnClearButtonClick="() => Currency = null"
                                     Clearable="true" ToStringFunc="@(e => e == null ? null : $"{e.Symbol} - {e.Name}")"/>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" OnClick="Verify" DisableElevation="true" Color="Color.Primary"
                               Size="Size.Large" Class="mt-8 px-12 py-3">Continue</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>
