// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XClaim.Web.Server.Data;

#nullable disable

namespace XClaim.Web.Server.Migrations
{
    [DbContext(typeof(ServerContext))]
    partial class ServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("XClaim.Web.Server.Entities.BankAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("TEXT")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_user_bank_account");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_user_bank_account_bank_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_bank_account_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_bank_account_owner_id");

                    b.ToTable("user_bank_account", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.BankEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("swift_code");

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_banks_deleted_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_name");

                    b.ToTable("banks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcb125d2-1d42-4b01-bc2c-a7863e708a47"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "GT Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("1771e448-891d-43c4-a0aa-3784803e9af1"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Zenith Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("dbb5aa84-e727-4b03-b18f-80315d2a18b4"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "First Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("3ce65741-39ef-4ca8-bc85-4afee4800a07"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Access Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("4a12f06b-352d-4786-899f-52ea979cc65c"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Fidelity Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("195fc39b-4791-41b7-9d9e-d9c31dcbe884"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "First City Monument Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("de625d37-6628-47d3-8656-6d457ca1b151"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Union Bank of Nigeria",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("8b98faad-c950-4adc-ac13-4577c3e7d616"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "United Bank for Africa",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("ac444cc9-93c2-4b90-b7a4-cb759fe9bb1a"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Sterling Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("8f2fdbbc-c992-4f57-86bf-167633c491fb"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Wema Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("bcb4a992-7936-4126-9bba-602b0f0f979f"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Stanbic IBTC Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("01cb6bc8-b3a7-4a9f-8c25-37885fbd1ada"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Polaris Bank Limited",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("2e6fa8fd-49ca-450d-a85d-54df1055816e"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Keystone Bank Limited",
                            SwiftCode = ""
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_categories_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_categories_deleted_at");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8db67707-4665-43b0-b26f-cfca391aa4b0"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Icon = "",
                            Name = "General Fuelling"
                        },
                        new
                        {
                            Id = new Guid("8286de04-35da-48fa-9fd3-9a90910c54aa"),
                            Active = false,
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Icon = "",
                            Name = "Internet Service"
                        },
                        new
                        {
                            Id = new Guid("4197d752-02d5-450a-9d3c-6fa44489d97d"),
                            Active = false,
                            CompanyId = new Guid("3de60ed7-4c83-43d9-ac34-21c18e849b8f"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Icon = "",
                            Name = "BHN - Weekly meeting expense"
                        },
                        new
                        {
                            Id = new Guid("64c7b903-12e5-4168-96fd-026a1a67f73f"),
                            Active = false,
                            CompanyId = new Guid("15539941-c7e7-45d4-b86e-05b5991f6215"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Icon = "",
                            Name = "MCPL - Monthly training expense"
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_by_id");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<Guid?>("ConfirmedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_by_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("ix_claims_approved_by_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_claims_category_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_claims_company_id");

                    b.HasIndex("ConfirmedById")
                        .HasDatabaseName("ix_claims_confirmed_by_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_claims_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_claims_owner_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_claims_payment_id");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("ix_claims_reviewed_by_id");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_comments_claim_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_comments_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_comments_owner_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_comments_payment_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_companies_deleted_at");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_manager_id");

                    b.ToTable("companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3de60ed7-4c83-43d9-ac34-21c18e849b8f"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            FullName = "MCPL LTD - BHN Division",
                            ShortName = "BHN Logistics"
                        },
                        new
                        {
                            Id = new Guid("15539941-c7e7-45d4-b86e-05b5991f6215"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            FullName = "Multi Consumer Product LTD",
                            ShortName = "MCPL LTD"
                        },
                        new
                        {
                            Id = new Guid("9f4598fe-bd5d-4e3b-8588-d293df693ba9"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            FullName = "Dufil Prima Foods Plc",
                            ShortName = "Dufil Prima"
                        },
                        new
                        {
                            Id = new Guid("84cccd2f-2369-4337-bb89-7495146d8411"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            FullName = "X-Claim Instance Management",
                            ShortName = "X-Claim"
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT")
                        .HasColumnName("rate");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currency_entity");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_currency_entity_code");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_currency_entity_deleted_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_currency_entity_name");

                    b.ToTable("currency_entity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("62184e4d-9397-459c-9623-1bb02a44419b"),
                            Active = false,
                            Code = "NGN",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Naira",
                            Rate = 0m,
                            Symbol = "₦"
                        },
                        new
                        {
                            Id = new Guid("4b2bb3b9-2e37-4942-a499-2c852e5db1c7"),
                            Active = false,
                            Code = "USD",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "US Dollar",
                            Rate = 0m,
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("88dddfe8-d318-4868-9bf5-8f267376e3a9"),
                            Active = false,
                            Code = "EUR",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Euro",
                            Rate = 0m,
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("a9161b94-6223-4929-b4ef-bbcd82ba6719"),
                            Active = false,
                            Code = "GBP",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "British Pounds",
                            Rate = 0m,
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("85ad4afd-5c60-44ae-b809-170fdaac6b09"),
                            Active = false,
                            Code = "INR",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Rupee",
                            Rate = 0m,
                            Symbol = "₹"
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.DomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_domain_entity");

                    b.ToTable("domain_entity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3bfd149-0a86-43f4-9021-81a3d6fea9a2"),
                            Active = false,
                            Address = "tolaram.com",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = ""
                        },
                        new
                        {
                            Id = new Guid("320655ca-4002-4539-8eab-3ee2dcac1804"),
                            Active = false,
                            Address = "dufil.com",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = ""
                        },
                        new
                        {
                            Id = new Guid("989e690e-7895-4dbf-93c6-fbb2cca3e632"),
                            Active = false,
                            Address = "outlook.com",
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = ""
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_events_claim_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_events_deleted_at");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_events_payment_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimEntityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_entity_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Extension")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<Guid?>("PaymentEntityId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_entity_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ClaimEntityId")
                        .HasDatabaseName("ix_files_claim_entity_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_files_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_files_owner_id");

                    b.HasIndex("PaymentEntityId")
                        .HasDatabaseName("ix_files_payment_entity_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Channels")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("channels");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disabled");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("types");

                    b.HasKey("Id")
                        .HasName("pk_user_notification");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_notification_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_notification_owner_id");

                    b.ToTable("user_notification", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<Guid?>("ConfirmedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_by_id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("ConfirmedById")
                        .HasDatabaseName("ix_payments_confirmed_by_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_payments_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_payments_owner_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.ServerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("MaintenanceMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maintenance_mode");

                    b.Property<string>("MaintenanceText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("maintenance_text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("service_name");

                    b.HasKey("Id")
                        .HasName("pk_server");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_server_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_server_deleted_at");

                    b.ToTable("server", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca00807b-625a-48e4-9269-3cbbd890226d"),
                            AdminEmail = "admin@x-claim.dev",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("62184e4d-9397-459c-9623-1bb02a44419b"),
                            MaintenanceMode = false,
                            MaintenanceText = "In-Progress",
                            ServiceName = "X-Claim"
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_mode");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER")
                        .HasColumnName("language");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_user_setting");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_setting_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_setting_owner_id");

                    b.ToTable("user_setting", (string)null);
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_teams_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_teams_deleted_at");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_manager_id");

                    b.ToTable("teams", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a063653-f0f0-468f-aec8-85bdcfd22c21"),
                            Active = false,
                            CompanyId = new Guid("3de60ed7-4c83-43d9-ac34-21c18e849b8f"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Account Dept"
                        },
                        new
                        {
                            Id = new Guid("47720f67-9f3d-4cce-b34c-8dc6aa26ddc6"),
                            Active = false,
                            CompanyId = new Guid("15539941-c7e7-45d4-b86e-05b5991f6215"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Logistics Dept"
                        },
                        new
                        {
                            Id = new Guid("8f08bd2f-148b-410a-8a15-1c826c5a7ede"),
                            Active = false,
                            CompanyId = new Guid("9f4598fe-bd5d-4e3b-8588-d293df693ba9"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Description = "",
                            Name = "Packaging Dept"
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasColumnName("balance");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("CompanyManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_managed_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<int>("Permission")
                        .HasColumnType("INTEGER")
                        .HasColumnName("permission");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT")
                        .HasColumnName("profile_image");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TeamManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_managed_id");

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_users_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_users_deleted_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identifier");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_users_team_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e90686-fc3e-4063-819c-1cd585dd49a3"),
                            Active = false,
                            Balance = 0m,
                            CompanyId = new Guid("3de60ed7-4c83-43d9-ac34-21c18e849b8f"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Email = "john.doe@tolaram.com",
                            FirstName = "John",
                            Identifier = "rtebe6r6mhpubcu7iitygg7woa",
                            LastName = "Doe",
                            Permission = 5,
                            Phone = "+234012345567",
                            TeamId = new Guid("0a063653-f0f0-468f-aec8-85bdcfd22c21")
                        },
                        new
                        {
                            Id = new Guid("cc8e58ef-9920-4090-a972-a027ed3f48e2"),
                            Active = false,
                            Balance = 0m,
                            CompanyId = new Guid("15539941-c7e7-45d4-b86e-05b5991f6215"),
                            CreatedAt = new DateTime(2023, 2, 2, 22, 38, 43, 510, DateTimeKind.Local).AddTicks(5798),
                            Email = "jane.doe@tolaram.com",
                            FirstName = "Jane",
                            Identifier = "syrbh5p7fuxuljf66irs5bhahi",
                            LastName = "Doe",
                            Permission = 5,
                            Phone = "+234022424553",
                            TeamId = new Guid("47720f67-9f3d-4cce-b34c-8dc6aa26ddc6")
                        });
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.BankAccountEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .HasConstraintName("fk_user_bank_account_banks_bank_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithOne("BankAccount")
                        .HasForeignKey("XClaim.Web.Server.Entities.BankAccountEntity", "OwnerId")
                        .HasConstraintName("fk_user_bank_account_users_owner_id");

                    b.Navigation("Bank");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CategoryEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_categories_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.ClaimEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("fk_claims_users_approved_by_id");

                    b.HasOne("XClaim.Web.Server.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_claims_categories_category_id");

                    b.HasOne("XClaim.Web.Server.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_claims_companies_company_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedById")
                        .HasConstraintName("fk_claims_users_confirmed_by_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_claims_users_owner_id");

                    b.HasOne("XClaim.Web.Server.Entities.PaymentEntity", "Payment")
                        .WithMany("Claims")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_claims_payments_payment_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("fk_claims_users_reviewed_by_id");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ConfirmedBy");

                    b.Navigation("Owner");

                    b.Navigation("Payment");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CommentEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.ClaimEntity", "Claim")
                        .WithMany("Comments")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_comments_claims_claim_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_owner_id");

                    b.HasOne("XClaim.Web.Server.Entities.PaymentEntity", "Payment")
                        .WithMany("Comments")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_comments_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Owner");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CompanyEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Manager")
                        .WithOne("CompanyManaged")
                        .HasForeignKey("XClaim.Web.Server.Entities.CompanyEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_companies_users_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.EventEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.ClaimEntity", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_events_claims_claim_id");

                    b.HasOne("XClaim.Web.Server.Entities.PaymentEntity", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_events_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.FileEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.ClaimEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("ClaimEntityId")
                        .HasConstraintName("fk_files_claims_claim_entity_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_files_users_owner_id");

                    b.HasOne("XClaim.Web.Server.Entities.PaymentEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("PaymentEntityId")
                        .HasConstraintName("fk_files_payments_payment_entity_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.NotificationEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithOne("Notification")
                        .HasForeignKey("XClaim.Web.Server.Entities.NotificationEntity", "OwnerId")
                        .HasConstraintName("fk_user_notification_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.PaymentEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedById")
                        .HasConstraintName("fk_payments_users_confirmed_by_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_users_owner_id");

                    b.Navigation("ConfirmedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.ServerEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_server_currency_entity_currency_id");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.SettingEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Owner")
                        .WithOne("Setting")
                        .HasForeignKey("XClaim.Web.Server.Entities.SettingEntity", "OwnerId")
                        .HasConstraintName("fk_user_setting_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.TeamEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_teams_companies_company_id");

                    b.HasOne("XClaim.Web.Server.Entities.UserEntity", "Manager")
                        .WithOne("TeamManaged")
                        .HasForeignKey("XClaim.Web.Server.Entities.TeamEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_teams_users_manager_id");

                    b.Navigation("Company");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.UserEntity", b =>
                {
                    b.HasOne("XClaim.Web.Server.Entities.CompanyEntity", "Company")
                        .WithMany("Members")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("XClaim.Web.Server.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_users_currency_entity_currency_id");

                    b.HasOne("XClaim.Web.Server.Entities.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_users_teams_team_id");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.ClaimEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.PaymentEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("XClaim.Web.Server.Entities.UserEntity", b =>
                {
                    b.Navigation("BankAccount");

                    b.Navigation("CompanyManaged");

                    b.Navigation("Notification");

                    b.Navigation("Setting");

                    b.Navigation("TeamManaged");
                });
#pragma warning restore 612, 618
        }
    }
}
