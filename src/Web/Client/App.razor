@using XClaim.Common.HTTP
@inject NavigationManager Nav
@inject AppState AppState
@inject AuthState AuthState
@inject ThemeState ThemeState
@inject IServerService ServerService

@code {
    
    private async Task OnNavigateAsync(NavigationContext args) {
        var isRootPath = args.Path.Equals(string.Empty);
        var isAuthPath = args.Path.Equals(WebConst.AppAuth);
        var isRegistrationPath = args.Path.Equals(WebConst.AppRegister);
        var session = await AuthState.GetSession();
        var isAuth = await AuthState.IsAuth();

        if (AppState.ServerState == null) {
            var server = await ServerService.GetAsync();
            await AppState.LoadServerState(server.Data!);
            await AuthState.Refresh();
        }
        
        if (isAuth) {
            var user = await AuthState.GetAccount();
            if (user != null) {
                var lightMode = user.Setting?.DarkMode ?? false;
                ThemeState.SetLightMode(!lightMode);
            }
        }

        switch (isAuth) {
            case true when !session!.Confirmed && !isRegistrationPath:
                Nav.NavigateTo(WebConst.AppRegister, true);
                break;
            case false when isAuthPath:
                break;
            case true when isAuthPath || isRootPath || (isRegistrationPath && session.Confirmed):
                Nav.NavigateTo(WebConst.AppHome);
                break;
            case false when isRootPath:
                await AuthState.TriggerAuthentication();
                if (isAuth) Nav.NavigateTo(!session!.Confirmed ? WebConst.AppRegister : WebConst.AppHome, true);
                else {
                    await Task.Delay(50);
                    Nav.NavigateTo(WebConst.AppAuth, true);
                }
                break;
            case false: {
                break;
            }
        }
    }
}

<RootLayout>
    <CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="new[] { typeof(MainLayout).Assembly }" OnNavigateAsync="OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true) {
                        <RedirectToSignin/>
                    } else {
                        <NotAuthorized />
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <Title>Not Found</Title>
            <AuthorizeView>
                <Authorized>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <ErrorFound />
                    </LayoutView>
                </Authorized>
                <NotAuthorized>
                    <LayoutView Layout="@typeof(AuthLayout)">
                        <ErrorFound />
                    </LayoutView>
                </NotAuthorized>
            </AuthorizeView>
        </NotFound>
    </Router>
    </CascadingAuthenticationState>
</RootLayout>