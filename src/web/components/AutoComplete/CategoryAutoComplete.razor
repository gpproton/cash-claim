@* @using Axolotl.Filters *@
@* @inject ICategoryService CategoryService *@
@* *@
@* @code { *@
@*     #pragma warning disable BL0007 *@
@* *@
@*     private  Category? _value; *@
@* *@
@*     [Parameter] *@
@*     public  Category? Value { get => _value; set { *@
@*         if(value == _value) return; *@
@*         _value = value; *@
@*         if(ValueChanged.HasDelegate)  ValueChanged.InvokeAsync(_value); *@
@*     }} *@
@* *@
@*     [Parameter] *@
@*     public EventCallback< Category?> ValueChanged { get; set; } *@
@* *@
@*     [Parameter] *@
@*     public bool Disabled { get; set; } *@
@* *@
@*     [Parameter] *@
@*     public bool Required { get; set; } *@
@* *@
@*     private async Task<IEnumerable< Category>> Search(string value) { *@
@*         var response = await CategoryService.GetAllAsync(new PageFilter { Search = value }); *@
@*         return (response.Succeeded ? response.Data : new List< Category>())!; *@
@*     } *@
@* } *@
@* *@
@* <MudAutocomplete T=" Category" Label="Category" @bind-Value="Value" SearchFunc="@Search" *@
@*                  Variant="Variant.Outlined" ShowProgressIndicator="true" OnClearButtonClick="() => Value = null" *@
@*                  Clearable="true" ToStringFunc="@(e => e.Name)" Disabled="@Disabled" *@
@*                  Required="@Required" RequiredError="Category is required!" /> *@