// <auto-generated />
using System;
using CashClaim.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CashClaim.Service.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20240402132135_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("CashClaim.Service.Entities.AuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Changed")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("changed");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER")
                        .HasColumnName("kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("row_id");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_histories");

                    b.ToTable("audit_histories", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.BankAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("TEXT")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("number");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_user_bank_account");

                    b.HasIndex("BankId")
                        .HasDatabaseName("ix_user_bank_account_bank_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_bank_account_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_bank_account_owner_id");

                    b.ToTable("user_bank_account", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.BankEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("swift_code");

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_banks_deleted_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_name");

                    b.ToTable("banks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e3ba913-95f1-4731-8275-d408bebc188c"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "GT Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("bb9691cf-826e-40a3-9eb5-a30926f78206"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Zenith Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("2a6ec7f9-bbab-4027-bfb4-57411248bc3f"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "First Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("d04fb869-65f6-47dc-8210-0c7f729b6c2f"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Access Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("92c74b77-c2e8-466b-9e53-b80880eaee5e"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Fidelity Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("bd9da65e-0c81-48d9-8584-ed8a3329e5e5"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "First City Monument Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("ebdd83be-f9ad-4534-b3c0-7e5a9bff69ef"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Union Bank of Nigeria",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("4317e298-28b9-42a9-bc15-f56e89112098"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "United Bank for Africa",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("5187ce1a-f723-4706-816a-07281c3a1ae1"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Sterling Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("aa0c6017-6141-4fcb-a6ea-ccca2e956f97"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Wema Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("d66a880d-e655-4c36-89d8-f77b21adb8ea"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Stanbic IBTC Bank",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("933d6ee9-0dd8-4af8-9d95-432faf89062f"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Polaris Bank Limited",
                            SwiftCode = ""
                        },
                        new
                        {
                            Id = new Guid("74873949-43b3-4672-92fb-79ddcd4e04c0"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Keystone Bank Limited",
                            SwiftCode = ""
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_categories_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_categories_deleted_at");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5821fcbc-43d4-4f23-953c-f6039775adc9"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Icon = "",
                            Name = "General Fuelling"
                        },
                        new
                        {
                            Id = new Guid("316707ad-a0ba-4217-a416-fdbd15aee814"),
                            Active = false,
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Icon = "",
                            Name = "Internet Service"
                        },
                        new
                        {
                            Id = new Guid("7f16094d-2d82-4ae0-94f9-b5e1cb91baa1"),
                            Active = false,
                            CompanyId = new Guid("d933d322-3242-42d7-a7ff-8f7f71bee0e9"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Icon = "",
                            Name = "BHN - Weekly meeting expense"
                        },
                        new
                        {
                            Id = new Guid("92cfead5-b3ae-4276-bf70-e501f4900dbc"),
                            Active = false,
                            CompanyId = new Guid("251dc29e-1aa6-4a22-8192-b7c7cbbc1f13"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Icon = "",
                            Name = "MCPL - Monthly training expense"
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<Guid?>("ConfirmedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("rejected_at");

                    b.Property<Guid?>("RejectedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("rejected_by_id");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("reviewed_by_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_claims");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("ix_claims_approved_by_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_claims_category_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_claims_company_id");

                    b.HasIndex("ConfirmedById")
                        .HasDatabaseName("ix_claims_confirmed_by_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_claims_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_claims_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_claims_owner_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_claims_payment_id");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("ix_claims_reviewed_by_id");

                    b.ToTable("claims", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<string>("Content")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_comments_claim_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_comments_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_comments_owner_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_comments_payment_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_companies_deleted_at");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_manager_id");

                    b.ToTable("companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d933d322-3242-42d7-a7ff-8f7f71bee0e9"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            FullName = "MCPL LTD - BHN Division",
                            ShortName = "BHN Logistics"
                        },
                        new
                        {
                            Id = new Guid("251dc29e-1aa6-4a22-8192-b7c7cbbc1f13"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            FullName = "Multi Consumer Product LTD",
                            ShortName = "MCPL LTD"
                        },
                        new
                        {
                            Id = new Guid("ff3d0844-bd7b-443d-aea8-ac9f7313aba5"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            FullName = "Dufil Prima Foods Plc",
                            ShortName = "Dufil Prima"
                        },
                        new
                        {
                            Id = new Guid("51664a2c-62ad-4d70-a750-aa89755559b6"),
                            Active = false,
                            AdminEmail = "",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            FullName = "X-Claim Instance Management",
                            ShortName = "X-Claim"
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT")
                        .HasColumnName("rate");

                    b.Property<string>("Symbol")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_currency_entity");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_currency_entity_code");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_currency_entity_deleted_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_currency_entity_name");

                    b.ToTable("currency_entity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fae4689-744e-4e08-b153-73440914ffc9"),
                            Active = false,
                            Code = "NGN",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Naira",
                            Rate = 0m,
                            Symbol = "₦"
                        },
                        new
                        {
                            Id = new Guid("8336192c-1344-45e3-b57a-3f97397b081c"),
                            Active = false,
                            Code = "USD",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "US Dollar",
                            Rate = 0m,
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("54958782-52c1-4f9d-8ebc-91085cab25d7"),
                            Active = false,
                            Code = "EUR",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Euro",
                            Rate = 0m,
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("556daac8-2b67-4d46-831e-9ff947c992ac"),
                            Active = false,
                            Code = "GBP",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "British Pounds",
                            Rate = 0m,
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("8986d0a0-cc73-4c33-adb5-99ede75e953f"),
                            Active = false,
                            Code = "INR",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Rupee",
                            Rate = 0m,
                            Symbol = "₹"
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.DomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_domain_entity");

                    b.ToTable("domain_entity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e29bfb61-1d30-4544-9fb9-5912fd9f2643"),
                            Active = false,
                            Address = "tolaram.com",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = ""
                        },
                        new
                        {
                            Id = new Guid("9d70235c-8bd9-4230-b8f0-404b51bc9b12"),
                            Active = false,
                            Address = "dufil.com",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = ""
                        },
                        new
                        {
                            Id = new Guid("e8bb9c25-c4d7-4143-89a8-ed6137b58e56"),
                            Active = false,
                            Address = "outlook.com",
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = ""
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_events_claim_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_events_payment_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClaimId")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Extension")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("ClaimId")
                        .HasDatabaseName("ix_files_claim_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_files_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_files_owner_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_files_payment_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Channels")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("channels");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disabled");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("types");

                    b.HasKey("Id")
                        .HasName("pk_user_notification");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_notification_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_notification_owner_id");

                    b.ToTable("user_notification", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("confirmed_at");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_payments_company_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_payments_created_by_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_payments_deleted_at");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_payments_owner_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.ServerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("admin_email");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_id");

                    b.Property<bool>("MaintenanceMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maintenance_mode");

                    b.Property<string>("MaintenanceText")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("maintenance_text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("service_name");

                    b.HasKey("Id")
                        .HasName("pk_server");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_server_currency_id");

                    b.ToTable("server", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bbaabd5-81fe-44da-8ae2-5ad8bdd2d1b9"),
                            AdminEmail = "admin@x-claim.dev",
                            CurrencyId = new Guid("4fae4689-744e-4e08-b153-73440914ffc9"),
                            MaintenanceMode = false,
                            MaintenanceText = "In-Progress",
                            ServiceName = "X-Claim"
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dark_mode");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER")
                        .HasColumnName("language");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_user_setting");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_setting_deleted_at");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_setting_owner_id");

                    b.ToTable("user_setting", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_teams_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_teams_deleted_at");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_manager_id");

                    b.ToTable("teams", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec9dfa7e-c74d-43a3-a9c1-8b7a35f1a208"),
                            Active = false,
                            CompanyId = new Guid("d933d322-3242-42d7-a7ff-8f7f71bee0e9"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Account Dept"
                        },
                        new
                        {
                            Id = new Guid("79a76b99-b6ee-40ca-9460-9bfd300c2382"),
                            Active = false,
                            CompanyId = new Guid("251dc29e-1aa6-4a22-8192-b7c7cbbc1f13"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Logistics Dept"
                        },
                        new
                        {
                            Id = new Guid("f77e1091-2f09-4e52-ab0c-aa445ffd0ca0"),
                            Active = false,
                            CompanyId = new Guid("ff3d0844-bd7b-443d-aea8-ac9f7313aba5"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Description = "",
                            Name = "Packaging Dept"
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.TransferRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("completed");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transfer_requests");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_transfer_requests_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_transfer_requests_deleted_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transfer_requests_user_id");

                    b.ToTable("transfer_requests", (string)null);
                });

            modelBuilder.Entity("CashClaim.Service.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER")
                        .HasColumnName("active");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT")
                        .HasColumnName("balance");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("CompanyManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("company_managed_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_at");

                    b.Property<int>("Permission")
                        .HasColumnType("INTEGER")
                        .HasColumnName("permission");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT")
                        .HasColumnName("profile_image");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TeamManagedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("team_managed_id");

                    b.Property<string>("Token")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_users_currency_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_users_deleted_at");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identifier");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_users_team_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b05485b8-c157-4c09-ba0a-68dfdfee4994"),
                            Active = false,
                            Balance = 0m,
                            CompanyId = new Guid("d933d322-3242-42d7-a7ff-8f7f71bee0e9"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Email = "john.doe@tolaram.com",
                            FirstName = "John",
                            Identifier = "6ptaait2kucefobaou3mqaskzy",
                            LastName = "Doe",
                            Permission = 5,
                            Phone = "+234012345567",
                            TeamId = new Guid("ec9dfa7e-c74d-43a3-a9c1-8b7a35f1a208")
                        },
                        new
                        {
                            Id = new Guid("ce544f22-295d-4bd8-944a-69cb3ffcc200"),
                            Active = false,
                            Balance = 0m,
                            CompanyId = new Guid("251dc29e-1aa6-4a22-8192-b7c7cbbc1f13"),
                            CreatedAt = new DateTime(2024, 4, 2, 14, 21, 34, 650, DateTimeKind.Local).AddTicks(1241),
                            Email = "jane.doe@tolaram.com",
                            FirstName = "Jane",
                            Identifier = "kkywogut4ecurkkitaifp3u6ei",
                            LastName = "Doe",
                            Permission = 5,
                            Phone = "+234022424553",
                            TeamId = new Guid("79a76b99-b6ee-40ca-9460-9bfd300c2382")
                        });
                });

            modelBuilder.Entity("CashClaim.Service.Entities.BankAccountEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.BankEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .HasConstraintName("fk_user_bank_account_banks_bank_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithOne("BankAccount")
                        .HasForeignKey("CashClaim.Service.Entities.BankAccountEntity", "OwnerId")
                        .HasConstraintName("fk_user_bank_account_users_owner_id");

                    b.Navigation("Bank");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CategoryEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_categories_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.ClaimEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.UserEntity", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .HasConstraintName("fk_claims_users_approved_by_id");

                    b.HasOne("CashClaim.Service.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_claims_categories_category_id");

                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_claims_companies_company_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "ConfirmedBy")
                        .WithMany()
                        .HasForeignKey("ConfirmedById")
                        .HasConstraintName("fk_claims_users_confirmed_by_id");

                    b.HasOne("CashClaim.Service.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_claims_currency_entity_currency_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_claims_users_owner_id");

                    b.HasOne("CashClaim.Service.Entities.PaymentEntity", "Payment")
                        .WithMany("Claims")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_claims_payments_payment_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("fk_claims_users_reviewed_by_id");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("ConfirmedBy");

                    b.Navigation("Currency");

                    b.Navigation("Owner");

                    b.Navigation("Payment");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CommentEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.ClaimEntity", "Claim")
                        .WithMany("Comments")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_comments_claims_claim_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_comments_users_owner_id");

                    b.HasOne("CashClaim.Service.Entities.PaymentEntity", "Payment")
                        .WithMany("Comments")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_comments_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Owner");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CompanyEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Manager")
                        .WithOne("CompanyManaged")
                        .HasForeignKey("CashClaim.Service.Entities.CompanyEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_companies_users_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.EventEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.ClaimEntity", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_events_claims_claim_id");

                    b.HasOne("CashClaim.Service.Entities.PaymentEntity", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_events_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.FileEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.ClaimEntity", "Claim")
                        .WithMany("Files")
                        .HasForeignKey("ClaimId")
                        .HasConstraintName("fk_files_claims_claim_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_files_users_owner_id");

                    b.HasOne("CashClaim.Service.Entities.PaymentEntity", "Payment")
                        .WithMany("Files")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_files_payments_payment_id");

                    b.Navigation("Claim");

                    b.Navigation("Owner");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.NotificationEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithOne("Notification")
                        .HasForeignKey("CashClaim.Service.Entities.NotificationEntity", "OwnerId")
                        .HasConstraintName("fk_user_notification_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.PaymentEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_payments_companies_company_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_payments_users_created_by_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_payments_users_owner_id");

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.ServerEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_server_currency_entity_currency_id");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.SettingEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Owner")
                        .WithOne("Setting")
                        .HasForeignKey("CashClaim.Service.Entities.SettingEntity", "OwnerId")
                        .HasConstraintName("fk_user_setting_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.TeamEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_teams_companies_company_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "Manager")
                        .WithOne("TeamManaged")
                        .HasForeignKey("CashClaim.Service.Entities.TeamEntity", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_teams_users_manager_id");

                    b.Navigation("Company");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.TransferRequestEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_transfer_requests_companies_company_id");

                    b.HasOne("CashClaim.Service.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_transfer_requests_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.UserEntity", b =>
                {
                    b.HasOne("CashClaim.Service.Entities.CompanyEntity", "Company")
                        .WithMany("Members")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("CashClaim.Service.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_users_currency_entity_currency_id");

                    b.HasOne("CashClaim.Service.Entities.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_users_teams_team_id");

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.ClaimEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.PaymentEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("CashClaim.Service.Entities.UserEntity", b =>
                {
                    b.Navigation("BankAccount");

                    b.Navigation("CompanyManaged");

                    b.Navigation("Notification");

                    b.Navigation("Setting");

                    b.Navigation("TeamManaged");
                });
#pragma warning restore 612, 618
        }
    }
}
